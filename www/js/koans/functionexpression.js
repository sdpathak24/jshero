jshero.koans.add({id:"functionexpression",title:"Funktionsausdr\xFCcke",lesson:"Wir haben bisher Funktionsdeklarationen kennen gelernt. Sie beginnen mit dem Schl\xFCsselwort <code>function</code>\ngefolgt von dem Funktionsnamen, den Parametern und dem Funktionsk\xF6rper:\n\n<pre><code>// Funktionsdeklaration\nfunction plusOne(x) {\n  return x + 1;\n}</code></pre>\n  \nMan kann Funktionen aber auch direkt im laufenden Code definieren. Eine solche Funktionsdefinition im laufende Code nennt man Funktionsausdruck.\nSo kann man zum Beispiel einer Variablen oder Konstanten direkt eine Funktion zuordnen.\n\n<pre><code>// Funktionsausdruck\nconst plusOne = function(x) {\n  return x + 1;\n};</code></pre>\n\nHier wurde keine Funktion deklariert, sondern wir haben einen Funktionsausdruck direkt einer Konstanten zugeordnet.\nDa es sich hier um eine Variablen-Zuordnung handelt, sollte das Statement mit einem Semikolon abgeschlossen werden.\nIm Gegensatz zu einer Funktionsdeklaration kann man bei einem Funktionsausdruck den Namen der Funktion weglassen.\nMan spricht in diesem Fall von einer anonymen Funktion. Die Funktion wird \xFCber den zugeordneten Variablennamen\naufgerufen:\n\n<pre><code>let foo = 1;\nfoo = plusOne(foo);\n</code></pre>\n\nEine Funktionsdeklaration und ein Funktionsausdruck mit Variablendeklaration sind praktisch gleichwertig.\nWelche Schreibweise man bevorzugt, ist Geschmackssache.\nWie wir noch sehen werden, spielen Funktionsausdr\xFCcke, insbesondere anonyme Funktionen, in der funktionalen Programmierung eine wichtige Rolle.\n<br></br>\nDa man die Verwendung von Funktionsausdr\xFCcken schwer testen kann, hier eine Aufgabe, die das Zusammenspiel von Strings\nund Schleifen \xFCbt.",task:"Schreibe eine Funktion <code>sperren</code>, die ein Wort entgegennimmt und dieses Wort gesperrt\nzur\xFCckgibt. Das Sperren soll dabei durch Einf\xFCgen von Leerzeichen realisiert werden.<br><br>\nBeispiel: <code>sperren(\"Juni\")</code> sollte <code>\"J u n i\"</code> ergeben.",tests:[function(){return jshero.testutil.assert_isFunction("sperren")},function(){return jshero.testutil.assert_functionHasNumOfParameter("sperren",1)},function(){return jshero.testutil.assert_functionReturns("sperren(\"Ei\")","E i")},function(){return jshero.testutil.assert_functionReturns("sperren(\"Juni\")","J u n i")},function(){return jshero.testutil.assert_functionReturns("sperren(\"Traum\")","T r a u m")},function(){return jshero.testutil.assert_functionReturns("sperren(\"Blaumeise\")","B l a u m e i s e")}]});