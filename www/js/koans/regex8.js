(function(testutil){jshero.koans.add({id:"regex8",title:"Regex: {n, m}",lesson:"Mit einen Ausdruck der Form <code>{n}</code>, <code>{n,m}</code> oder <code>{n,}</code> kann man die\nAnzahl der Wiederholungen genauer festlegen. <code>{n}</code> steht f\xFCr genau n Wiederholungen, <code>{n,m}</code>\nf\xFCr mindestens n und h\xF6chstens m Wiederholungen und <code>{n,}</code> f\xFCr mindestens n Wiederholungen.\nSo steht <code>/\\d{5}/</code> f\xFCr genau 5 aufeinanderfolgende Ziffern, <code>/.{6,20}/</code> f\xFCr mindestens 6 und\nh\xF6chsten 20 beliebige Zeichen und <code>/[a-zA-Z]{5,}/</code> f\xFCr mindestens 5 aufeinanderfolgende Buchstaben.",task:"Schreibe eine Funktion <code>pruefe</code>, die feststellt, ob ein String ein deutsches\nKfz-Kennzeichen ist. Ein solches Kennzeichen soll dem Schema 'XXX YY NNNN' gen\xFCgen. Dabei steht XXX f\xFCr 1 bis 3\nbeliebige Gro\xDFbuchstaben, YY f\xFCr 1 bis 2 beliebige Gro\xDFbuchstaben und NNNN f\xFCr eine maximal 4stellige Zahl. F\xFChrende\nNullen sind bei der Zahl nicht zugelassen.<br><br>Beispiel: <code>pruefe('OF C 709')</code> sollte <code>true</code>\nund <code>pruefe('OF 709')</code> sollte <code>false</code> ergeben.",hint:"<pre><code>function pruefe(s) {\n  return /^[A-Z]{1,3}...\n}</code></pre>",solution:"<pre><code>function pruefe(s) {\n  return /^[A-Z]{1,3} [A-Z]{1,2} [1-9][0-9]{0,3}$/.test(s);\n}</code></pre>",tests:[function(){return testutil.assert_isFunction("pruefe")},function(){return testutil.assert_functionHasNumOfParameter("pruefe",1)},function(){return testutil.assert_functionReturns("pruefe('F A 1')",true)},function(){return testutil.assert_functionReturns("pruefe('F A 9999')",true)},function(){return testutil.assert_functionReturns("pruefe('OF ZZ 1')",true)},function(){return testutil.assert_functionReturns("pruefe('LUP B 456')",true)},function(){return testutil.assert_functionReturns("pruefe('F A 0')",false)},function(){return testutil.assert_functionReturns("pruefe('F A 01')",false)},function(){return testutil.assert_functionReturns("pruefe('OF A 12345')",false)},function(){return testutil.assert_functionReturns("pruefe('OF A')",false)},function(){return testutil.assert_functionReturns("pruefe('HH 1')",false)},function(){return testutil.assert_functionReturns("pruefe('HB AAA 1')",false)},function(){return testutil.assert_functionReturns("pruefe('FFFF A 1')",false)},function(){return testutil.assert_functionReturns("pruefe('F A A 1')",false)},function(){return testutil.assert_functionReturns("pruefe('F A 1 1')",false)}]})})(jshero.testutil);